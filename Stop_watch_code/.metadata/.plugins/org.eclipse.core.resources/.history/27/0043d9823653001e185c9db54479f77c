#include <avr/io.h>
#include<util/delay.h>
#include <avr/interrupt.h>
unsigned char second_unit=5;
unsigned char second_tens=5;
unsigned char minuit_unit=9;
unsigned char minuit_tens=5;
unsigned char hours_unit=0;
unsigned char hours_tens=1;
void timer1_count(void){
	SREG |=(1<<7);
	TCCR1A |= (1<<COM1A1);
	TCCR1B |= (1<<WGM12) | (1<<CS11) | (1<<CS10);
	TIMSK |=(1<<OCIE1A);
	TCNT1 =0;
	OCR1A = 15625;
}
void interrupt0_reset(void){
	//for enable I_bit
	SREG |= (1<<7);
	//falling edge interrupt
	MCUCR |= (1<<ISC01);
	//for enable the external pin interrupt
	GICR |= (1<<INT0);

}
void interrupt1_paused(void){
	//for enable I_bit
	SREG |= (1<<7);
	//falling edge interrupt
	MCUCR |= (1<<ISC10) | (1<<ISC11);
	//for enable the external pin interrupt
	GICR |= (1<<INT1);

}
void interrupt2_resumed(void){}

int main(){
	timer1_count();
	interrupt0_reset();
	//for making the first 4 pin in portC O/P
	DDRC =0X0F;
	//for making the first 6 pin in portA O/P
	DDRA =0X3F;
	//for making a falling edge of INT0
	DDRD &=~(1<<2);
	//put 1 in PORTD pin 2 this will enable the internal pull up resistor
	PORTD |=(1<<2);
	//for making the pin 3 in portD input (raising edge for INT1)
	DDRD &=~(1<<3);
	//for putting initial value on button B2 equal 0
	PORTD &=~(1<<3);
	//for making a falling edge of INT2
	DDRB &=~(1<<2);
	//put 1 in PORTB pin 2 this will enable the internal pull up resistor
	PORTB |=(1<<2);
	//for clear first 6 bits in portA
	PORTA &=0xC0;
	//set the first 4 pin portC initial value equal 1
	PORTC = 0xF0;
	while(1){
		//know i will clear the first 6 pin in portA to make it contain the value of it is common
		PORTA =(PORTA & 0xC0)| 0X01;
		//then clear first 4 pin in portC to include the value you need to display it
		PORTC = (PORTC & 0XF0) | (second_unit & 0X0F);
		//using delay 1 mile second for making display very smooth
		_delay_ms(1);
		//know i will clear portA to make it contain the value of it is common
		PORTA =(PORTA & 0xC0)| 0X02;
		//then clear first 4 pin in portC to include the value you need to display it
		PORTC = (PORTC & 0XF0) | (second_tens & 0X0F);
		//using delay 1 mile second for making display very smooth
		_delay_ms(1);
		//know i will clear portA to make it contain the value of it is common
		PORTA =(PORTA & 0xC0)| 0X04;
		//then clear first 4 pin in portC to include the value you need to display it
		PORTC = (PORTC & 0XF0) | (minuit_unit & 0X0F);
		//using delay 1 mile second for making display very smooth
		_delay_ms(1);
		//know i will clear portA to make it contain the value of it is common
		PORTA =(PORTA & 0xC0)| 0X08;
		//then clear first 4 pin in portC to include the value you need to display it
		PORTC = (PORTC & 0XF0) | (minuit_tens & 0X0F);
		//using delay 1 mile second for making display very smooth
		_delay_ms(1);
		//know i will clear portA to make it contain the value of it is common
		PORTA =(PORTA & 0xC0)| 0X10;
		//then clear first 4 pin in portC to include the value you need to display it
		PORTC = (PORTC & 0XF0) | (hours_unit & 0X0F);
		//using delay 1 mile second for making display very smooth
		_delay_ms(1);
		//know i will clear portA to make it contain the value of it is common
		PORTA =(PORTA & 0xC0)| 0X20;
		//then clear first 4 pin in portC to include the value you need to display it
		PORTC = (PORTC & 0XF0) | (hours_tens & 0X0F);
		//using delay 1 mile second for making display very smooth
		_delay_ms(1);
	}

}
ISR(TIMER1_COMPA_vect){
	second_unit++;
	if(second_unit >9){
		second_unit=0;
		second_tens++;
	}
	if(second_tens == 6){
		second_tens=0;
		second_unit=0;
		minuit_unit++;
	}
	if(minuit_unit >9){
		minuit_unit=0;
		minuit_tens++;
	}
	if(minuit_tens == 6){
		minuit_tens=0;
		minuit_unit=0;
		hours_unit++;
	}
	if(hours_unit >9){
		hours_unit=0;
		hours_tens++;
	}
}
ISR(INT0_vect){
	second_unit=0;
	second_tens=0;
	minuit_unit=0;
	minuit_tens=0;
	hours_unit=0;
	hours_tens=0;
}
ISR(INT1_vect){
	TCCR1A=0;
	TCCR1B=0;
}
